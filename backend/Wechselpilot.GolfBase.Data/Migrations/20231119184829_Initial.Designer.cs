// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Wechselpilot.GolfBase.Data;

#nullable disable

namespace Wechselpilot.GolfBase.Data.Migrations
{
    [DbContext(typeof(GolfDbContext))]
    [Migration("20231119184829_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Wechselpilot.GolfBase.Data.Entities.MapEntity", b =>
                {
                    b.Property<Guid>("MapId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Holes")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Par")
                        .HasColumnType("int");

                    b.HasKey("MapId");

                    b.ToTable("Maps", (string)null);
                });

            modelBuilder.Entity("Wechselpilot.GolfBase.Data.Entities.PlayerEntity", b =>
                {
                    b.Property<Guid>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlayerId");

                    b.ToTable("Players", (string)null);
                });

            modelBuilder.Entity("Wechselpilot.GolfBase.Data.Entities.SeasonEntity", b =>
                {
                    b.Property<Guid>("SeasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("SeasonId");

                    b.ToTable("Seasons", (string)null);
                });

            modelBuilder.Entity("Wechselpilot.GolfBase.Data.Entities.SeasonalMapAssignmentEntity", b =>
                {
                    b.Property<Guid>("SeasonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MapId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SeasonId", "MapId");

                    b.HasIndex("MapId");

                    b.ToTable("SeasonalMapAssignments", (string)null);
                });

            modelBuilder.Entity("Wechselpilot.GolfBase.Data.Entities.SessionEntity", b =>
                {
                    b.Property<Guid>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MapId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SeasonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Timestamp")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("SessionId");

                    b.HasIndex("MapId");

                    b.HasIndex("SeasonId");

                    b.ToTable("Sessions", (string)null);
                });

            modelBuilder.Entity("Wechselpilot.GolfBase.Data.Entities.SessionResultEntity", b =>
                {
                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PlayerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("SessionId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("SessionResults", (string)null);
                });

            modelBuilder.Entity("Wechselpilot.GolfBase.Data.Entities.SeasonalMapAssignmentEntity", b =>
                {
                    b.HasOne("Wechselpilot.GolfBase.Data.Entities.MapEntity", "Map")
                        .WithMany()
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wechselpilot.GolfBase.Data.Entities.SeasonEntity", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Map");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("Wechselpilot.GolfBase.Data.Entities.SessionEntity", b =>
                {
                    b.HasOne("Wechselpilot.GolfBase.Data.Entities.MapEntity", "Map")
                        .WithMany("Sessions")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wechselpilot.GolfBase.Data.Entities.SeasonEntity", "Season")
                        .WithMany("Sessions")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Map");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("Wechselpilot.GolfBase.Data.Entities.SessionResultEntity", b =>
                {
                    b.HasOne("Wechselpilot.GolfBase.Data.Entities.PlayerEntity", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Wechselpilot.GolfBase.Data.Entities.SessionEntity", "Session")
                        .WithMany("Results")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Wechselpilot.GolfBase.Data.Entities.MapEntity", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("Wechselpilot.GolfBase.Data.Entities.SeasonEntity", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("Wechselpilot.GolfBase.Data.Entities.SessionEntity", b =>
                {
                    b.Navigation("Results");
                });
#pragma warning restore 612, 618
        }
    }
}
